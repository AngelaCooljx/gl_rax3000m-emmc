From d3feb0442f82ec2322a6e400f49ec67dbdeaf183 Mon Sep 17 00:00:00 2001
From: Dongming Han <handongming@gl-inet.com>
Date: Sat, 8 Jul 2023 11:25:53 +0800
Subject: [PATCH] wireguard: use out of tree version for performance

Signed-off-by: Dongming Han <handongming@gl-inet.com>
---
 package/kernel/linux/modules/netsupport.mk    |  2 +-
 package/network/services/wireguard/Makefile   | 89 +++++++++++++++++++
 .../100-port_wireguard_linux_compat.patch     | 78 ++++++++++++++++
 .../patches/150-support-hotplug-for-gl.patch  | 64 +++++++++++++
 ...d-server-not-do-handshake-initiation.patch | 26 ++++++
 ...MEOUT-hotplug-after-3-consecutive-fa.patch | 65 ++++++++++++++
 .../services/wireguard/src/src/hotplug.c      | 82 +++++++++++++++++
 .../services/wireguard/src/src/hotplug.h      | 13 +++
 8 files changed, 418 insertions(+), 1 deletion(-)
 create mode 100644 package/network/services/wireguard/Makefile
 create mode 100644 package/network/services/wireguard/patches/100-port_wireguard_linux_compat.patch
 create mode 100644 package/network/services/wireguard/patches/150-support-hotplug-for-gl.patch
 create mode 100644 package/network/services/wireguard/patches/152-make-wireguard-server-not-do-handshake-initiation.patch
 create mode 100644 package/network/services/wireguard/patches/153-trigger-REKEY_TIMEOUT-hotplug-after-3-consecutive-fa.patch
 create mode 100644 package/network/services/wireguard/src/src/hotplug.c
 create mode 100644 package/network/services/wireguard/src/src/hotplug.h

diff --git a/package/kernel/linux/modules/netsupport.mk b/package/kernel/linux/modules/netsupport.mk
index 526bd57246..7814ef3fdb 100644
--- a/package/kernel/linux/modules/netsupport.mk
+++ b/package/kernel/linux/modules/netsupport.mk
@@ -1419,7 +1419,7 @@ define KernelPackage/wireguard/description
   alike, fit for many different circumstances. It uses UDP.
 endef
 
-$(eval $(call KernelPackage,wireguard))
+# $(eval $(call KernelPackage,wireguard))
 
 
 define KernelPackage/netconsole
diff --git a/package/network/services/wireguard/Makefile b/package/network/services/wireguard/Makefile
new file mode 100644
index 0000000000..adbe29ea2d
--- /dev/null
+++ b/package/network/services/wireguard/Makefile
@@ -0,0 +1,89 @@
+#
+# Copyright (C) 2016-2019 Jason A. Donenfeld <Jason@zx2c4.com>
+# Copyright (C) 2016 Baptiste Jonglez <openwrt@bitsofnetworks.org>
+# Copyright (C) 2016-2017 Dan Luedtke <mail@danrl.com>
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+include $(TOPDIR)/rules.mk
+include $(INCLUDE_DIR)/kernel.mk
+
+PKG_NAME:=wireguard
+
+PKG_VERSION:=1.0.20220627
+PKG_RELEASE:=1
+
+PKG_SOURCE:=wireguard-linux-compat-$(PKG_VERSION).tar.xz
+PKG_SOURCE_URL:=https://git.zx2c4.com/wireguard-linux-compat/snapshot/
+PKG_HASH:=362d412693c8fe82de00283435818d5c5def7f15e2433a07a9fe99d0518f63c0
+
+PKG_LICENSE:=GPL-2.0
+PKG_LICENSE_FILES:=COPYING
+
+PKG_BUILD_DIR:=$(KERNEL_BUILD_DIR)/wireguard-linux-compat-$(PKG_VERSION)
+PKG_BUILD_PARALLEL:=1
+PKG_USE_MIPS16:=0
+
+# WireGuard's makefile needs this to know where to build the kernel module
+export KERNELDIR:=$(LINUX_DIR)
+
+include $(INCLUDE_DIR)/package.mk
+
+define Package/wireguard/Default
+  SECTION:=net
+  CATEGORY:=Network
+  SUBMENU:=VPN
+  URL:=https://www.wireguard.com
+  MAINTAINER:=Jason A. Donenfeld <Jason@zx2c4.com> \
+              Kevin Darbyshire-Bryant <ldir@darbyshire-bryant.me.uk>
+endef
+
+define Package/wireguard/Default/description
+  WireGuard is a novel VPN that runs inside the Linux Kernel and utilizes
+  state-of-the-art cryptography. It aims to be faster, simpler, leaner, and
+  more useful than IPSec, while avoiding the massive headache. It intends to
+  be considerably more performant than OpenVPN.  WireGuard is designed as a
+  general purpose VPN for running on embedded interfaces and super computers
+  alike, fit for many different circumstances. It uses UDP.
+endef
+
+define Package/wireguard
+  $(call Package/wireguard/Default)
+  TITLE:=WireGuard meta-package
+  DEPENDS:=+wireguard-tools +kmod-wireguard
+endef
+
+include $(INCLUDE_DIR)/kernel-defaults.mk
+include $(INCLUDE_DIR)/package-defaults.mk
+
+define Build/Compile
+	$(MAKE) $(KERNEL_MAKEOPTS) M="$(PKG_BUILD_DIR)/src" modules
+endef
+
+define Package/wireguard/install
+  true
+endef
+
+define Package/wireguard/description
+  $(call Package/wireguard/Default/description)
+endef
+
+define KernelPackage/wireguard
+  SECTION:=kernel
+  CATEGORY:=Kernel modules
+  SUBMENU:=Network Support
+  TITLE:=WireGuard kernel module
+  DEPENDS:=+IPV6:kmod-udptunnel6 +kmod-udptunnel4
+  FILES:= $(PKG_BUILD_DIR)/src/wireguard.$(LINUX_KMOD_SUFFIX)
+  AUTOLOAD:=$(call AutoProbe,wireguard)
+endef
+
+define KernelPackage/wireguard/description
+  $(call Package/wireguard/Default/description)
+
+  This package provides the kernel module for WireGuard.
+endef
+
+$(eval $(call BuildPackage,wireguard))
+$(eval $(call KernelPackage,wireguard))
diff --git a/package/network/services/wireguard/patches/100-port_wireguard_linux_compat.patch b/package/network/services/wireguard/patches/100-port_wireguard_linux_compat.patch
new file mode 100644
index 0000000000..a252de4629
--- /dev/null
+++ b/package/network/services/wireguard/patches/100-port_wireguard_linux_compat.patch
@@ -0,0 +1,78 @@
+Index: wireguard-linux-compat-1.0.20220627/src/compat/compat.h
+===================================================================
+--- wireguard-linux-compat-1.0.20220627.orig/src/compat/compat.h
++++ wireguard-linux-compat-1.0.20220627/src/compat/compat.h
+@@ -37,10 +37,6 @@
+ #error "WireGuard requires Linux >= 3.10"
+ #endif
+ 
+-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0)
+-#error "WireGuard has been merged into Linux >= 5.6 and therefore this compatibility module is no longer required."
+-#endif
+-
+ #if defined(ISRHEL7)
+ #include <linux/skbuff.h>
+ #define headers_end headers_start
+@@ -1124,7 +1120,7 @@ static const struct header_ops ip_tunnel
+ #endif
+ #endif
+ 
+-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 16, 0)
++#if 0
+ #include <net/dst_cache.h>
+ struct dst_cache_pcpu {
+ 	unsigned long refresh_ts;
+Index: wireguard-linux-compat-1.0.20220627/src/socket.c
+===================================================================
+--- wireguard-linux-compat-1.0.20220627.orig/src/socket.c
++++ wireguard-linux-compat-1.0.20220627/src/socket.c
+@@ -49,11 +49,11 @@ static int send4(struct wg_device *wg, s
+ 		rt = dst_cache_get_ip4(cache, &fl.saddr);
+ 
+ 	if (!rt) {
+-		security_sk_classify_flow(sock, flowi4_to_flowi(&fl));
++		security_sk_classify_flow(sock, flowi4_to_flowi_common(&fl));
+ 		if (unlikely(!inet_confirm_addr(sock_net(sock), NULL, 0,
+ 						fl.saddr, RT_SCOPE_HOST))) {
+ 			endpoint->src4.s_addr = 0;
+-			endpoint->src_if4 = 0;
++			*(__force __be32 *)&endpoint->src_if4 = 0;
+ 			fl.saddr = 0;
+ 			if (cache)
+ 				dst_cache_reset(cache);
+@@ -63,7 +63,7 @@ static int send4(struct wg_device *wg, s
+ 			     PTR_ERR(rt) == -EINVAL) || (!IS_ERR(rt) &&
+ 			     rt->dst.dev->ifindex != endpoint->src_if4)))) {
+ 			endpoint->src4.s_addr = 0;
+-			endpoint->src_if4 = 0;
++			*(__force __be32 *)&endpoint->src_if4 = 0;
+ 			fl.saddr = 0;
+ 			if (cache)
+ 				dst_cache_reset(cache);
+@@ -71,7 +71,7 @@ static int send4(struct wg_device *wg, s
+ 				ip_rt_put(rt);
+ 			rt = ip_route_output_flow(sock_net(sock), &fl, sock);
+ 		}
+-		if (IS_ERR(rt)) {
++		if (unlikely(IS_ERR(rt))) {
+ 			ret = PTR_ERR(rt);
+ 			net_dbg_ratelimited("%s: No route to %pISpfsc, error %d\n",
+ 					    wg->dev->name, &endpoint->addr, ret);
+@@ -129,7 +129,7 @@ static int send6(struct wg_device *wg, s
+ 		dst = dst_cache_get_ip6(cache, &fl.saddr);
+ 
+ 	if (!dst) {
+-		security_sk_classify_flow(sock, flowi6_to_flowi(&fl));
++		security_sk_classify_flow(sock, flowi6_to_flowi_common(&fl));
+ 		if (unlikely(!ipv6_addr_any(&fl.saddr) &&
+ 			     !ipv6_chk_addr(sock_net(sock), &fl.saddr, NULL, 0))) {
+ 			endpoint->src6 = fl.saddr = in6addr_any;
+@@ -138,7 +138,7 @@ static int send6(struct wg_device *wg, s
+ 		}
+ 		dst = ipv6_stub->ipv6_dst_lookup_flow(sock_net(sock), sock, &fl,
+ 						      NULL);
+-		if (IS_ERR(dst)) {
++		if (unlikely(IS_ERR(dst))) {
+ 			ret = PTR_ERR(dst);
+ 			net_dbg_ratelimited("%s: No route to %pISpfsc, error %d\n",
+ 					    wg->dev->name, &endpoint->addr, ret);
diff --git a/package/network/services/wireguard/patches/150-support-hotplug-for-gl.patch b/package/network/services/wireguard/patches/150-support-hotplug-for-gl.patch
new file mode 100644
index 0000000000..f9bb1f0d27
--- /dev/null
+++ b/package/network/services/wireguard/patches/150-support-hotplug-for-gl.patch
@@ -0,0 +1,64 @@
+Index: wireguard-linux-compat-1.0.20211208/src/Kbuild
+===================================================================
+--- wireguard-linux-compat-1.0.20211208.orig/src/Kbuild
++++ wireguard-linux-compat-1.0.20211208/src/Kbuild
+@@ -7,7 +7,7 @@ ccflags-y += -Wframe-larger-than=2048
+ ccflags-$(CONFIG_WIREGUARD_DEBUG) += -DDEBUG -g
+ ccflags-$(if $(WIREGUARD_VERSION),y,) += -D'WIREGUARD_VERSION="$(WIREGUARD_VERSION)"'
+ 
+-wireguard-y := main.o noise.o device.o peer.o timers.o queueing.o send.o receive.o socket.o peerlookup.o allowedips.o ratelimiter.o cookie.o netlink.o
++wireguard-y := main.o noise.o device.o peer.o timers.o queueing.o send.o receive.o socket.o peerlookup.o allowedips.o ratelimiter.o cookie.o netlink.o hotplug.o
+ 
+ include $(src)/crypto/Kbuild.include
+ include $(src)/compat/Kbuild.include
+Index: wireguard-linux-compat-1.0.20211208/src/noise.c
+===================================================================
+--- wireguard-linux-compat-1.0.20211208.orig/src/noise.c
++++ wireguard-linux-compat-1.0.20211208/src/noise.c
+@@ -9,6 +9,7 @@
+ #include "messages.h"
+ #include "queueing.h"
+ #include "peerlookup.h"
++#include "hotplug.h"
+ 
+ #include <linux/rcupdate.h>
+ #include <linux/slab.h>
+@@ -819,6 +820,8 @@ bool wg_noise_handshake_begin_session(st
+ 		ret = wg_index_hashtable_replace(
+ 			handshake->entry.peer->device->index_hashtable,
+ 			&handshake->entry, &new_keypair->entry);
++
++		wireguard_hotplug(handshake->entry.peer->device->dev->name, KEYPAIR_CREATED_EVENT);
+ 	} else {
+ 		kfree_sensitive(new_keypair);
+ 	}
+Index: wireguard-linux-compat-1.0.20211208/src/timers.c
+===================================================================
+--- wireguard-linux-compat-1.0.20211208.orig/src/timers.c
++++ wireguard-linux-compat-1.0.20211208/src/timers.c
+@@ -8,6 +8,7 @@
+ #include "peer.h"
+ #include "queueing.h"
+ #include "socket.h"
++#include "hotplug.h"
+ 
+ /*
+  * - Timer for retransmitting the handshake if we don't hear back after
+@@ -60,6 +61,8 @@ static void wg_expired_retransmit_handsh
+ 		if (!timer_pending(&peer->timer_zero_key_material))
+ 			mod_peer_timer(peer, &peer->timer_zero_key_material,
+ 				       jiffies + REJECT_AFTER_TIME * 3 * HZ);
++
++		wireguard_hotplug(peer->device->dev->name, REKEY_GIVEUP_EVENT);
+ 	} else {
+ 		++peer->timer_handshake_attempts;
+ 		pr_debug("%s: Handshake for peer %llu (%pISpfsc) did not complete after %d seconds, retrying (try %d)\n",
+@@ -73,6 +76,8 @@ static void wg_expired_retransmit_handsh
+ 		wg_socket_clear_peer_endpoint_src(peer);
+ 
+ 		wg_packet_send_queued_handshake_initiation(peer, true);
++
++		wireguard_hotplug(peer->device->dev->name, REKEY_TIMEOUT_EVENT);
+ 	}
+ }
+ 
diff --git a/package/network/services/wireguard/patches/152-make-wireguard-server-not-do-handshake-initiation.patch b/package/network/services/wireguard/patches/152-make-wireguard-server-not-do-handshake-initiation.patch
new file mode 100644
index 0000000000..571073dc60
--- /dev/null
+++ b/package/network/services/wireguard/patches/152-make-wireguard-server-not-do-handshake-initiation.patch
@@ -0,0 +1,26 @@
+From 8bfdfc1e0546835e25ae011053ae4e52583d8220 Mon Sep 17 00:00:00 2001
+From: Dongming Han <handongming@gl-inet.com>
+Date: Wed, 1 Feb 2023 19:14:16 +0800
+Subject: [PATCH] make wireguard server not do handshake initiation
+
+---
+ src/send.c | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/src/send.c b/src/send.c
+index 55bb0c9..9860e3f 100644
+--- a/src/send.c
++++ b/src/send.c
+@@ -23,6 +23,9 @@ static void wg_packet_send_handshake_initiation(struct wg_peer *peer)
+ {
+ 	struct message_handshake_initiation packet;
+ 
++	if (!strncmp(peer->device->dev->name, "wgs", 3))
++		return;
++
+ 	if (!wg_birthdate_has_expired(atomic64_read(&peer->last_sent_handshake),
+ 				      REKEY_TIMEOUT))
+ 		return; /* This function is rate limited. */
+-- 
+2.25.1
+
diff --git a/package/network/services/wireguard/patches/153-trigger-REKEY_TIMEOUT-hotplug-after-3-consecutive-fa.patch b/package/network/services/wireguard/patches/153-trigger-REKEY_TIMEOUT-hotplug-after-3-consecutive-fa.patch
new file mode 100644
index 0000000000..8875478b39
--- /dev/null
+++ b/package/network/services/wireguard/patches/153-trigger-REKEY_TIMEOUT-hotplug-after-3-consecutive-fa.patch
@@ -0,0 +1,65 @@
+From 5aa16c5c878bab30b125c3fd98246750684e9df3 Mon Sep 17 00:00:00 2001
+From: Dongming Han <handongming@gl-inet.com>
+Date: Thu, 13 Jul 2023 19:15:06 +0800
+Subject: [PATCH] trigger REKEY_TIMEOUT hotplug after 3 consecutive failure of
+ handshake initiation
+
+detect disconnect time change from 0 ~ 2min to 15s ~ 2min15s
+Optimize the stability in packet loss environment
+
+Signed-off-by: Dongming Han <handongming@gl-inet.com>
+---
+ src/receive.c | 2 ++
+ src/timers.c  | 9 +++++++--
+ 2 files changed, 9 insertions(+), 2 deletions(-)
+
+diff --git a/src/receive.c b/src/receive.c
+index 214889e..dfbf52d 100644
+--- a/src/receive.c
++++ b/src/receive.c
+@@ -97,6 +97,7 @@ static int prepare_skb_header(struct sk_buff *skb, struct wg_device *wg)
+ 	return 0;
+ }
+ 
++extern int is_retry_count_wg;
+ static void wg_receive_handshake_packet(struct wg_device *wg,
+ 					struct sk_buff *skb)
+ {
+@@ -193,6 +194,7 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
+ 			 */
+ 			wg_packet_send_keepalive(peer);
+ 		}
++		is_retry_count_wg = 0;
+ 		break;
+ 	}
+ 	}
+diff --git a/src/timers.c b/src/timers.c
+index 7f0716c..04c8029 100644
+--- a/src/timers.c
++++ b/src/timers.c
+@@ -39,6 +39,7 @@ static inline void mod_peer_timer(struct wg_peer *peer,
+ 	rcu_read_unlock_bh();
+ }
+ 
++int is_retry_count_wg = 0;
+ static void wg_expired_retransmit_handshake(struct timer_list *timer)
+ {
+ 	struct wg_peer *peer = from_timer(peer, timer,
+@@ -76,8 +77,12 @@ static void wg_expired_retransmit_handshake(struct timer_list *timer)
+ 		wg_socket_clear_peer_endpoint_src(peer);
+ 
+ 		wg_packet_send_queued_handshake_initiation(peer, true);
+-
+-		wireguard_hotplug(peer->device->dev->name, REKEY_TIMEOUT_EVENT);
++		is_retry_count_wg++;
++		if(is_retry_count_wg > 3)
++		{
++			is_retry_count_wg = 0;
++			wireguard_hotplug(peer->device->dev->name, REKEY_TIMEOUT_EVENT);
++		}
+ 	}
+ }
+ 
+-- 
+2.25.1
+
diff --git a/package/network/services/wireguard/src/src/hotplug.c b/package/network/services/wireguard/src/src/hotplug.c
new file mode 100644
index 0000000000..62cfe0927f
--- /dev/null
+++ b/package/network/services/wireguard/src/src/hotplug.c
@@ -0,0 +1,82 @@
+#include <linux/workqueue.h>
+#include <linux/netlink.h>
+#include <linux/kobject.h>
+#include <linux/skbuff.h>
+#include <linux/if.h>
+
+#define SUBSYSTEM_NAME	"wireguard"
+
+#define EVENT_BUF_SIZE	2048
+
+struct wg_event {
+	struct work_struct work;
+	char ifname[IFNAMSIZ];
+	const char *action;
+};
+
+
+/* -------------------------------------------------------------------------*/
+static int bh_event_add_var(struct sk_buff *skb, int argv,
+							const char *format, ...)
+{
+	static char buf[128];
+	char *s;
+	va_list args;
+	int len;
+
+	if (argv)
+		return 0;
+
+	va_start(args, format);
+	len = vsnprintf(buf, sizeof(buf), format, args);
+	va_end(args);
+
+	if (len >= sizeof(buf)) {
+		//WARN(1, "buffer size too small\n");
+		return -ENOMEM;
+	}
+
+	s = skb_put(skb, len + 1);
+	strcpy(s, buf);
+
+	return 0;
+}
+
+static void hotplug_work(struct work_struct *work)
+{
+	struct wg_event *event = container_of(work, struct wg_event, work);
+	struct sk_buff *skb;
+
+	skb = alloc_skb(EVENT_BUF_SIZE, GFP_KERNEL);
+	if (!skb)
+		goto out_free_event;
+
+	bh_event_add_var(skb, 0, "SUBSYSTEM=%s", SUBSYSTEM_NAME);
+	bh_event_add_var(skb, 0, "ACTION=%s", event->action);
+	bh_event_add_var(skb, 0, "ifname=%s", event->ifname);
+
+	NETLINK_CB(skb).dst_group = 1;
+	broadcast_uevent(skb, 0, 1, GFP_KERNEL);
+
+out_free_event:
+	kfree(event);
+}
+
+void wireguard_hotplug(const char *ifname, const char *action)
+{
+	struct wg_event *event;
+
+	if (!strcmp(ifname, "wgserver"))
+		return;
+
+	event = kzalloc(sizeof(struct wg_event), GFP_ATOMIC);
+	if (!event)
+		return;
+
+	memcpy(event->ifname, ifname, IFNAMSIZ);
+
+	event->action = action;
+
+	INIT_WORK(&event->work, hotplug_work);
+	schedule_work(&event->work);
+}
diff --git a/package/network/services/wireguard/src/src/hotplug.h b/package/network/services/wireguard/src/src/hotplug.h
new file mode 100644
index 0000000000..7fb54d9dfa
--- /dev/null
+++ b/package/network/services/wireguard/src/src/hotplug.h
@@ -0,0 +1,13 @@
+#ifndef __HOTPLUG_H__
+#define __HOTPLUG_H__
+
+#define  REKEY_GIVEUP_EVENT "REKEY-GIVEUP"
+#define  REKEY_TIMEOUT_EVENT "REKEY-TIMEOUT"
+#define  KEYPAIR_CREATED_EVENT "KEYPAIR-CREATED"
+
+extern void wireguard_hotplug(const char *ifname, const char *action);
+extern void wg_hotplug_init(void);
+extern void wg_hotplug_free(void);
+
+#endif
+
-- 
2.25.1

